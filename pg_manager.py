# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pgmanager
                                 A QGIS plugin
 PostgreSQL User Manager
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GIS Support sp. z.o.o
        email                : info@gis-support.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon, QStandardItemModel
from PyQt5.QtWidgets import QAction, QTableWidgetItem, QTreeWidgetItem, QCheckBox,\
    QTreeWidget, QMessageBox, QHBoxLayout, QWidget
from qgis.core import Qgis, QgsDataSourceUri
import db_manager.db_plugins.postgis.connector as con
import psycopg2
from copy import deepcopy

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .pg_manager_utils import parsePrivileges, findChanges, getPrivilegeEditionSql, checkSuperUser,\
    revokeAllUserPrivileges
from .pg_manager_dockwidget import pgmanagerDockWidget
from .pg_manager_adduser import pgmanagerAddUser
import os.path


class pgmanager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pgmanager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PostgreSQL User Manager')

        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.databaseToolBar()
        # self.toolbar.setObjectName(u'pgmanager')

        # print "** INITIALIZING pgmanager"

        self.database = None
        self.pluginIsActive = False
        self.dockwidget = None
        self.changes = None
        self.currentObjectType = None
        self.currentSchemaName = None
        self.currentTableName = None
        self.loadedPrivileges = None
        self.currentWidgetItem = None
        self.schemas_tables = None
        self.roles = None
        self.disconnected = None

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('pgmanager', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.dockwidget = pgmanagerDockWidget()
        self.tableWidget = self.dockwidget.tableWidget
        self.treeWidget = self.dockwidget.treeWidget
        self.btnSaveChanges = self.dockwidget.btnSaveChanges
        self.btnAddUser = self.dockwidget.btnAddUser
        self.btnDeleteUser = self.dockwidget.btnDeleteUser
        self.btnDisconnect = self.dockwidget.btnDisconnect

        icon_path = ':/plugins/pg_manager/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'PostgreSQL User Manager'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.dockwidget.btnRefresh.setIcon(
            QIcon(os.path.join(self.plugin_dir, 'icons/reload.png')))

        # ui actions
        self.btnSaveChanges.clicked.connect(self.saveChanges)
        self.treeWidget.itemClicked.connect(self.widgetItemClicked)
        self.dockwidget.btnRefresh.clicked.connect(self.refreshConnections)
        self.dockwidget.btnConnect.clicked.connect(self.connectAndLoadTables)
        self.btnAddUser.clicked.connect(self.addUser)
        self.btnDeleteUser.clicked.connect(self.deleteUser)
        self.btnDisconnect.clicked.connect(self.disconnect)

    # --------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""
        if self.database:
            self.database.close()
        # print "** CLOSING pgmanager"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        # print "** UNLOAD pgmanager"
        if self.database:
            self.database.close()
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&PostgreSQL User Manager'),
                action)
            self.toolbar.removeAction(action)

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""
        if not self.pluginIsActive:
            self.pluginIsActive = True

            # print "** STARTING pgmanager"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = pgmanagerDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            connections_details = self.getPostgresConnectionsDetails(
                QSettings())
            self.addConnectionsToCb(connections_details)

    def getPostgresConnectionsDetails(self, conns):
        conns.beginGroup("PostgreSQL/connections")
        conns_parsed = []
        conns_names = conns.childGroups()
        if len(conns_names) == 0:
            self.showMessage(
                'Brak zdefiniowanych połączeń do baz PostgreSQL',
                Qgis.Critical,
                2,
                'Błąd'
            )
        conns_keys = set([
            key.split('/')[1]
            for key in conns.allKeys()
            if '/' in key
        ])
        for name in conns_names:
            conns_parsed.append({
                "name": name,
                "params": {
                    key: conns.value(name+"/"+key)
                    for key in conns_keys
                }
            })
        return conns_parsed

    def addConnectionsToCb(self, conns_details):
        for conn in conns_details:
            self.dockwidget.cmbConnections.addItem(
                conn['name'],
                conn['params']
            )

    def refreshConnections(self):
        new_conns = self.getPostgresConnectionsDetails(QSettings())
        self.dockwidget.cmbConnections.clear()
        self.addConnectionsToCb(new_conns)
        self.showMessage(
            'Pomyślnie odświeżono listę połączeń do baz PostgreSQL',
            Qgis.Info,
            2,
            'Sukces'
        )

    def showMessage(self, description, level, time=3, title=None):
        self.iface.messageBar().pushMessage(
            title,
            self.tr(description),
            level,
            duration=time
        )

    def connectAndLoadTables(self):
        #połączenie z bazą
        conns_details = self.dockwidget.cmbConnections.currentData()
        if conns_details['username'] == '' and conns_details['password'] == '':
            self.showMessage(
                'Nie podano danych użytkownika w połączeniu do bazy danych',
                Qgis.Critical,
                3,
                'Błąd'
            )
            return
        try:
            if conns_details['username'] == '' and conns_details['password'] == '':
                self.showMessage(
                    'Nie podano danych użytkownika w połączeniu do bazy danych',
                    Qgis.Critical,
                    3,
                    'Błąd'
                )
                return
            self.database = psycopg2.connect(
                dbname=conns_details['database'],
                user=conns_details['username'],
                password=conns_details['password'],
                host=conns_details['host'],
                port=conns_details['port']
            )
            self.database.autocommit = True
            self.disconnected = False
            #sprawdzenie czy user jest superadminem
            is_super_user = checkSuperUser(self.database, 'CURRENT_USER')
            if not is_super_user:
                self.showMessage(
                    'Brak uprawnień do zarządzania wybraną bazą danych',
                    Qgis.Critical,
                    2,
                    'Błąd'
                )
                self.treeWidget.clear()
                self.database.close()
                return
            #pobranie userów
            self.schemas_tables = self.getSchemasAndTables(self.database)
            self.populateTreeWidget(self.schemas_tables)
        except ConnectionError:
            self.showMessage(
                'Błędne dane do połączenia z bazą danych',
                Qgis.Critical,
                2,
                'Błąd'    
            )
            return
        except AttributeError:
            self.showMessage(
                'Nie wybrano połączenia do bazy PostgreSQL',
                Qgis.Critical,
                2,
                'Błąd'
            )
            return
        except psycopg2.OperationalError:
            self.showMessage(
                'Podczas próby połączenia z bazą PostgreSQL wystąpił błąd. Sprawdź poprawność danych połączenia',
                Qgis.Critical,
                2,
                'Błąd'
            )

    def populateTable(self, db, privileges, objectType, delete=None):
        #tabele
        if objectType == 'table':
            cur = self.database.cursor()
            cur.execute('SELECT usename,rolname FROM pg_user,pg_roles WHERE oid=usesysid;')
            users_names = [row[0] for row in cur.fetchall()]
            self.database.rollback()
            row_count = len(users_names)
            self.tableWidget.setRowCount(row_count)
            self.tableWidget.setVerticalHeaderLabels(users_names)
            #dodanie kolumn do tabeli wtyczki
            codes = ['SELECT','INSERT','UPDATE','DELETE']
            column_count = len(codes)
            self.tableWidget.setColumnCount(column_count)
            self.tableWidget.setHorizontalHeaderLabels(codes)
            del cur
            privileges_parsed = {}
            for data in privileges:
                if data[1] not in privileges_parsed.keys():
                    privileges_parsed.update({
                        data[1]: list(data[2:])
                    })
            for index_row, v in enumerate(privileges_parsed.values()):
                for index_column, privilege in enumerate(v):
                    qb = QCheckBox()
                    w = QWidget()
                    qb = QCheckBox()
                    qb.setStyleSheet(
                        "QCheckBox::indicator{ width: 18px; height: 17px;)}"
                    )
                    layout = QHBoxLayout(w)
                    layout.addWidget(qb)
                    layout.setAlignment(Qt.AlignCenter)
                    w.setLayout(layout)
                    if str(privilege) == 'True':
                        qb.setChecked(True)
                    else:
                        qb.setChecked(False)
                    self.tableWidget.setCellWidget(index_row, index_column, w)
                    qb.stateChanged.connect(self.uncommittedChanges)
        else:
            #schematy
            codes = ['USAGE', 'CREATE']
            row_count = len(privileges)
            users_names = list(privileges.keys())
            self.tableWidget.setRowCount(len(users_names))
            self.tableWidget.setVerticalHeaderLabels(users_names)
            column_count = len(codes)
            self.tableWidget.setColumnCount(column_count)
            self.tableWidget.setHorizontalHeaderLabels(codes)
            for index_row, v in enumerate(privileges.values()):
                for index_column, privilege in enumerate(v):
                    w = QWidget()
                    qb = QCheckBox()
                    qb.setStyleSheet(
                        "QCheckBox::indicator{ width: 18px; height: 17px;}"
                    )
                    layout = QHBoxLayout(w)
                    layout.addWidget(qb)
                    layout.setAlignment(Qt.AlignCenter)
                    w.setLayout(layout)
                    if privilege:
                        qb.setChecked(True)
                    else:
                        qb.setChecked(False)
                    self.tableWidget.setCellWidget(index_row, index_column, w)
                    qb.stateChanged.connect(self.uncommittedChanges)
        if not delete:
            self.showMessage(
                'Pomyślnie pobrano uprawnienia tabeli',
                Qgis.Success,
                2,
                'Sukces'
            )

    def getPrivileges(self, db, type, data=None):
        cr = self.database.cursor()
        output = []
        if data:
            if type == 'table':
                cr.execute(
                    """
                    set search_path to {};
                    select a.tablename,b.usename,HAS_TABLE_PRIVILEGE(usename,tablename, 'select') as select,
                        HAS_TABLE_PRIVILEGE(usename,tablename, 'insert') as insert,
                        HAS_TABLE_PRIVILEGE(usename,tablename, 'update') as update,
                        HAS_TABLE_PRIVILEGE(usename,tablename, 'delete') as delete, 
                        HAS_TABLE_PRIVILEGE(usename,tablename, 'references') as references  from pg_tables a , pg_user b 
                        where a.tablename='{}';""".format(data[0], data[1])                
                )
                self.currentObjectDetails = {
                    "schema": data[0],
                    "table": data[1]
                }
                output = cr.fetchall()
            elif type == 'schema':
                cr.execute("""SELECT u.usename AS "Role"
                    FROM pg_catalog.pg_user u""")
                out = cr.fetchall()
                self.roles = [out[i][0] for i, g in enumerate(out)]
                output = dict.fromkeys(self.roles,
                    [
                        False, False
                    ]
                )
                del cr
                cr = self.database.cursor()
                cr.execute(
                    """
                    SELECT r.rolname AS role_name,
                     n.nspname AS schema_name,
                    p.perm AS privilege
                    FROM pg_catalog.pg_namespace AS n
                        CROSS JOIN pg_catalog.pg_roles AS r
                        CROSS JOIN (VALUES ('USAGE'), ('CREATE')) AS p(perm)
                    WHERE has_schema_privilege(r.oid, n.oid, p.perm)
                        AND n.nspname like '{}'
	                    AND r.rolname not like 'pg_%'
                    """.format(data[0])
                )
                output = {}
                out = cr.fetchall()
                for o in out:
                    if o[0] in output.keys():
                        output[o[0]].update({
                            o[2]: True
                        })
                    else:
                        output.update({
                            o[0]: {o[2]: True}
                        })
                for k, v in output.items():
                    usage, create = True, True
                    if 'USAGE' not in v.keys():
                        usage = False
                    elif 'CREATE' not in v.keys():
                        create = False
                    output[k] = [usage, create]
                for role in self.roles:
                    if role not in output.keys():
                        output.update({
                            role: [False, False]
                        })
                self.currentObjectDetails = {
                    "schema": data[0],
                    "table": None
                }
            db.rollback()
            del cr 
            return output
        else:
            pass

    def getSchemasAndTables(self, db):
        try:
            cr = self.database.cursor()
            cr.execute("""select table_catalog, table_schema, table_name
                from information_schema.tables
                where table_schema not like 'pg_%' and
                    table_schema not like 'information%' and
                    table_name not like '%_columns' and
                    table_name not like 'spatial_ref_sys' and
                    table_name not like '%overviews';
                """
            )
        except psycopg2.InterfaceError:
            return
        tables_schemas = cr.fetchall()
        schemas = [schema[1] for schema in tables_schemas]
        schemas = list(set(schemas))
        tables_schemas_parsed = {}
        for item in tables_schemas:
            if not item[1] in tables_schemas_parsed.keys():
                tables_schemas_parsed.update({
                    item[1]: [item[2]]
                })
            else:
                tables_schemas_parsed[item[1]].append(item[2])
        db.rollback()
        del cr
        return tables_schemas_parsed

    def populateTreeWidget(self, data):
        self.treeWidget.clear()
        for index, (k, v) in enumerate(data.items()):
            qti_schema = QTreeWidgetItem([k], index)
            self.treeWidget.addTopLevelItem(qti_schema)
            for ind, table in enumerate(v):
                qti_table = QTreeWidgetItem([table], ind)
                qti_schema.insertChild(ind, qti_table)     

    def widgetItemClicked(self, item):
        self.currentWidgetItem = item
        save = None
        if self.changes == True:
            qb = QMessageBox.question(
                None,
                'PostgreSQL User Manager',
                u'Zatwierdzić niezapisane zmiany?',
                QMessageBox.Yes | QMessageBox.No
            )
            if qb == QMessageBox.Yes:
                self.saveChanges()
            else:
                save = False
        if save == False or self.changes != True:
            self.changes = False
            if item.parent() is not None:
                self.currentObjectType = 'table'
                schema_name = item.parent().text(0)
                table_name = item.text(0)
                self.currentSchemaName = schema_name
                self.currentTableName = table_name
                self.reloadPrivileges(schema_name, table_name)
            else:
                self.currentObjectType = 'schema'
                schema_name = item.text(0)
                self.currentSchemaName = schema_name
                self.currentTableName = None
                self.reloadPrivileges(schema_name)

    def getLoadedPrivileges(self, tableWidget):
        rows = tableWidget.rowCount()
        cols = tableWidget.columnCount()
        widgets = []
        for r in range(0, rows):
            for c in range(0, cols):
                try:
                    widgets.append([tableWidget.cellWidget(r,c).children()[1], [r,c]])
                except AttributeError:
                    pass
        return widgets

    def saveChanges(self, delete=None):
        try:
            current_privileges = self.loadedPrivileges
            if not self.loadedPrivileges:
                self.showMessage(
                    'Nie wybrano schematu ani tabeli, nie można zapisać zmian',
                    Qgis.Critical,
                    2,
                    'Błąd'
                )
                return
            privileges_changed = parsePrivileges(self.getLoadedPrivileges(self.tableWidget))
            changes = findChanges(current_privileges, privileges_changed)
            cur = self.database.cursor()
            sql = ""
            for change in changes:
                data = {
                    "user": self.tableWidget.verticalHeaderItem(change[2]).text(),
                    "privilege": self.tableWidget.horizontalHeaderItem(change[1]).text(),
                    "value": change[0]
                }
                sql += str(getPrivilegeEditionSql(data, self.currentObjectDetails))
            cur.execute(sql)
        except psycopg2.ProgrammingError:
            self.showMessage(
                'Nie wprowadzono zmian w uprawnieniach',
                Qgis.Critical,
                2,
                'Błąd'
            )
            return
        except IndexError:
            self.showMessage(
                'Brak połączenia z bazą danych',
                Qgis.Critical,
                2,
                'Błąd'
            )
            return
        if not delete:
            self.showMessage(
                'Pomyślnie zaktualizowano uprawnienia',
                Qgis.Success,
                2,
                'Sukces'
            )
        del cur
        self.database.rollback()
        self.changes = False
        self.loadedPrivileges = deepcopy(privileges_changed)

    def uncommittedChanges(self):
        self.changes = True

    def addUser(self):
        if not self.disconnected and self.database:
            try:
                self.widgetItemClicked(self.currentWidgetItem)
            except:
                pass
            self.createUserDialog = pgmanagerAddUser(self)
            self.createUserDialog.show()
        else:
            self.showMessage(
                'Brak połączenia z bazą danych',
                Qgis.Critical,
                2,
                'Błąd'
            )
            return

    def deleteUser(self):
        selected_indexes = self.tableWidget.selectedIndexes()
        selected_indexes_p = [[i.row(), i.column()] for i in selected_indexes]
        try:
            current_row = selected_indexes_p[0][0]
        except IndexError:
            self.showMessage(
                'Nie wybrano użytkownika',
                Qgis.Critical,
                2,
                'Błąd'
            )
            return
        username = self.tableWidget.verticalHeaderItem(current_row).text()
        qb = QMessageBox.question(
            None,
            'PostgreSQL User Manager',
            u'Czy na pewno usunąć użytkownika {}?\n'\
                ''.format(username),
            QMessageBox.Yes | QMessageBox.No
        )
        if qb == QMessageBox.Yes:
            if self.changes:
                self.widgetItemClicked(self.currentWidgetItem)
            cr = self.database.cursor()
            try:
                revokeAllUserPrivileges(self.database, username, self.schemas_tables)
                cr.execute("""DROP ROLE {};""".format(username))
            except psycopg2.InternalError:
                self.showMessage(
                    'Podczas usuwania użytkownika wystąpił błąd',
                    Qgis.Critical,
                    2,
                    'Błąd'
                )
            self.reloadPrivileges(self.currentSchemaName, self.currentTableName, delete=True)
            self.database.rollback()
            del cr
        else:
            return            

    def reloadPrivileges(self, schema_name, table_name=None, delete=None):
        if table_name:
            self.currentObjectType = 'table'
            current_table_privileges = self.getPrivileges(self.database, 'table', [schema_name, table_name])
            self.populateTable(self.database, current_table_privileges, 'table', delete=True)
            lp = parsePrivileges(self.getLoadedPrivileges(self.tableWidget))
            self.loadedPrivileges = deepcopy(lp)
        else:
            self.currentObjectType = 'schema'
            current_schema_privileges = self.getPrivileges(self.database, 'schema', [schema_name])
            self.populateTable(self.database, current_schema_privileges, 'schema', delete=True)
            lp = parsePrivileges(self.getLoadedPrivileges(self.tableWidget))
            self.loadedPrivileges = deepcopy(lp)

    def disconnect(self):
        try:
            self.database.close()
            self.treeWidget.clear()
            self.tableWidget.setRowCount(0)
            self.tableWidget.setColumnCount(0)
            self.disconnected = True
        except:
            self.showMessage(
                'Brak połączenia z bazą danych',
                Qgis.Critical,
                2,
                'Błąd'
            )
            return
